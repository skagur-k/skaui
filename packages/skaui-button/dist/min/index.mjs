import H, { useRef, useContext, useEffect, forwardRef, useState, useMemo, useLayoutEffect, useCallback } from 'react';

var hr=Object.create;var Mt=Object.defineProperty;var yr=Object.getOwnPropertyDescriptor;var Pr=Object.getOwnPropertyNames;var Er=Object.getPrototypeOf,xr=Object.prototype.hasOwnProperty;var wr=(e,t)=>()=>(t||e((t={exports:{}}).exports,t),t.exports);var Tr=(e,t,r,n)=>{if(t&&typeof t=="object"||typeof t=="function")for(let o of Pr(t))!xr.call(e,o)&&o!==r&&Mt(e,o,{get:()=>t[o],enumerable:!(n=yr(t,o))||n.enumerable});return e};var He=(e,t,r)=>(r=e!=null?hr(Er(e)):{},Tr(t||!e||!e.__esModule?Mt(r,"default",{value:e,enumerable:!0}):r,e));var Ve=wr((ns,Be)=>{(function(){var e={}.hasOwnProperty;function t(){for(var r=[],n=0;n<arguments.length;n++){var o=arguments[n];if(!!o){var s=typeof o;if(s==="string"||s==="number")r.push(o);else if(Array.isArray(o)){if(o.length){var a=t.apply(null,o);a&&r.push(a);}}else if(s==="object")if(o.toString===Object.prototype.toString)for(var i in o)e.call(o,i)&&o[i]&&r.push(i);else r.push(o.toString());}}return r.join(" ")}typeof Be<"u"&&Be.exports?(t.default=t,Be.exports=t):typeof define=="function"&&typeof define.amd=="object"&&define.amd?define("classnames",[],function(){return t}):window.classNames=t;})();});function Ge(e,t,r,n){Object.defineProperty(e,t,{get:r,set:n,enumerable:!0,configurable:!0});}var Ue={};Ge(Ue,"SSRProvider",()=>Fr);Ge(Ue,"useSSRSafeId",()=>ze);Ge(Ue,"useIsSSR",()=>Mr);var he={prefix:String(Math.round(Math.random()*1e10)),current:0},me=H.createContext(he);function Fr(e){let t=useContext(me),r=useMemo(()=>({prefix:t===he?"":`${t.prefix}-${++t.current}`,current:0}),[t]);return H.createElement(me.Provider,{value:r},e.children)}var Cr=Boolean(typeof window<"u"&&window.document&&window.document.createElement);function ze(e){let t=useContext(me);return t===he&&!Cr&&console.warn("When server rendering, you must wrap your application in an <SSRProvider> to ensure consistent ids are generated between the client and server."),useMemo(()=>e||`react-aria${t.prefix}-${++t.current}`,[e])}function Mr(){let t=useContext(me)!==he,[r,n]=useState(t);return typeof window<"u"&&t&&useLayoutEffect(()=>{n(!1);},[]),r}function Kt(e){var t,r,n="";if(typeof e=="string"||typeof e=="number")n+=e;else if(typeof e=="object")if(Array.isArray(e))for(t=0;t<e.length;t++)e[t]&&(r=Kt(e[t]))&&(n&&(n+=" "),n+=r);else for(t in e)e[t]&&(n&&(n+=" "),n+=t);return n}function Dr(){for(var e,t,r=0,n="";r<arguments.length;)(e=arguments[r++])&&(t=Kt(e))&&(n&&(n+=" "),n+=t);return n}var ye=Dr;function Pe(e,t,r,n){Object.defineProperty(e,t,{get:r,set:n,enumerable:!0,configurable:!0});}var Nr={};Pe(Nr,"useControlledState",()=>Or);function Or(e,t,r){let[n,o]=useState(e||t),s=useRef(e!==void 0),a=s.current,i=e!==void 0,c=useRef(n);a!==i&&console.warn(`WARN: A component changed from ${a?"controlled":"uncontrolled"} to ${i?"controlled":"uncontrolled"}.`),s.current=i;let f=useCallback((b,...y)=>{let g=(l,...m)=>{r&&(Object.is(c.current,l)||r(l,...m)),i||(c.current=l);};typeof b=="function"?(console.warn("We can not support a function callback. See Github Issues for details https://github.com/adobe/react-spectrum/issues/2320"),o((m,...v)=>{let x=b(i?c.current:m,...v);return g(x,...y),i?m:x})):(i||o(b),g(b,...y));},[i,r]);return i?c.current=e:e=n,[e,f]}var Ye={};Pe(Ye,"clamp",()=>Xe);Pe(Ye,"snapValueToStep",()=>je);Pe(Ye,"toFixedNumber",()=>kr);function Xe(e,t=-1/0,r=1/0){return Math.min(Math.max(e,t),r)}function je(e,t,r,n){let o=(e-(isNaN(t)?0:t))%n,s=Math.abs(o)*2>=n?e+Math.sign(o)*(n-Math.abs(o)):e-o;isNaN(t)?!isNaN(r)&&s>r&&(s=Math.floor(r/n)*n):s<t?s=t:!isNaN(r)&&s>r&&(s=t+Math.floor((r-t)/n)*n);let a=n.toString(),i=a.indexOf("."),c=i>=0?a.length-i:0;if(c>0){let f=Math.pow(10,c);s=Math.round(s*f)/f;}return s}function kr(e,t,r=10){let n=Math.pow(r,t);return Math.round(e*n)/n}function E(e,t,r,n){Object.defineProperty(e,t,{get:r,set:n,enumerable:!0,configurable:!0});}var Je={};E(Je,"useId",()=>Qe);E(Je,"mergeIds",()=>At);E(Je,"useSlotId",()=>Br);var Ar={};E(Ar,"useLayoutEffect",()=>I);var I=typeof window<"u"?H.useLayoutEffect:()=>{},we=new Map;function Qe(e){let[t,r]=useState(e),n=useRef(null),o=ze(t),s=useCallback(a=>{n.current=a;},[]);return we.set(o,s),I(()=>{let a=o;return ()=>{we.delete(a);}},[o]),useEffect(()=>{let a=n.current;a&&(n.current=null,r(a));}),o}function At(e,t){if(e===t)return e;let r=we.get(e);if(r)return r(t),t;let n=we.get(t);return n?(n(e),e):t}function Br(e=[]){let t=Qe(),[r,n]=Ut(t),o=useCallback(()=>{n(function*(){yield t,yield document.getElementById(t)?t:null;});},[t,n]);return I(o,[t,o,...e]),r}var Vr={};E(Vr,"chain",()=>Se);function Se(...e){return (...t)=>{for(let r of e)typeof r=="function"&&r(...t);}}var Hr={};E(Hr,"mergeProps",()=>M);function M(...e){let t={...e[0]};for(let r=1;r<e.length;r++){let n=e[r];for(let o in n){let s=t[o],a=n[o];typeof s=="function"&&typeof a=="function"&&o[0]==="o"&&o[1]==="n"&&o.charCodeAt(2)>=65&&o.charCodeAt(2)<=90?t[o]=Se(s,a):(o==="className"||o==="UNSAFE_className")&&typeof s=="string"&&typeof a=="string"?t[o]=ye(s,a):o==="id"&&s&&a?t.id=At(s,a):t[o]=a!==void 0?a:s;}}return t}var Wr={};E(Wr,"mergeRefs",()=>Ze);function Ze(...e){return t=>{for(let r of e)typeof r=="function"?r(t):r!=null&&(r.current=t);}}var Gr={};E(Gr,"filterDOMProps",()=>et);var Ur=new Set(["id"]),zr=new Set(["aria-label","aria-labelledby","aria-describedby","aria-details"]),Yr=/^(data-.*)$/;function et(e,t={}){let{labelable:r,propNames:n}=t,o={};for(let s in e)Object.prototype.hasOwnProperty.call(e,s)&&(Ur.has(s)||r&&zr.has(s)||(n==null?void 0:n.has(s))||Yr.test(s))&&(o[s]=e[s]);return o}var Xr={};E(Xr,"focusWithoutScrolling",()=>W);function W(e){if(jr())e.focus({preventScroll:!0});else {let t=_r(e);e.focus(),qr(t);}}var Ee=null;function jr(){if(Ee==null){Ee=!1;try{var e=document.createElement("div");e.focus({get preventScroll(){return Ee=!0,!0}});}catch{}}return Ee}function _r(e){for(var t=e.parentNode,r=[],n=document.scrollingElement||document.documentElement;t instanceof HTMLElement&&t!==n;)(t.offsetHeight<t.scrollHeight||t.offsetWidth<t.scrollWidth)&&r.push({element:t,scrollTop:t.scrollTop,scrollLeft:t.scrollLeft}),t=t.parentNode;return n instanceof HTMLElement&&r.push({element:n,scrollTop:n.scrollTop,scrollLeft:n.scrollLeft}),r}function qr(e){for(let{element:t,scrollTop:r,scrollLeft:n}of e)t.scrollTop=r,t.scrollLeft=n;}var Jr={};E(Jr,"getOffset",()=>Bt);function Bt(e,t,r="horizontal"){let n=e.getBoundingClientRect();return t?r==="horizontal"?n.right:n.bottom:r==="horizontal"?n.left:n.top}var Vt={};E(Vt,"clamp",()=>Xe);E(Vt,"snapValueToStep",()=>je);var Qr={};E(Qr,"runAfterTransition",()=>ce);var q=new Map,qe=new Set;function Ot(){if(typeof window>"u")return;let e=r=>{let n=q.get(r.target);n||(n=new Set,q.set(r.target,n),r.target.addEventListener("transitioncancel",t)),n.add(r.propertyName);},t=r=>{let n=q.get(r.target);if(!!n&&(n.delete(r.propertyName),n.size===0&&(r.target.removeEventListener("transitioncancel",t),q.delete(r.target)),q.size===0)){for(let o of qe)o();qe.clear();}};document.body.addEventListener("transitionrun",e),document.body.addEventListener("transitionend",t);}typeof document<"u"&&(document.readyState!=="loading"?Ot():document.addEventListener("DOMContentLoaded",Ot));function ce(e){requestAnimationFrame(()=>{q.size===0?e():qe.add(e);});}var Zr={};E(Zr,"useDrag1D",()=>en);var xe=[];function en(e){console.warn("useDrag1D is deprecated, please use `useMove` instead https://react-spectrum.adobe.com/react-aria/useMove.html");let{containerRef:t,reverse:r,orientation:n,onHover:o,onDrag:s,onPositionChange:a,onIncrement:i,onDecrement:c,onIncrementToMax:f,onDecrementToMin:b,onCollapseToggle:y}=e,g=w=>n==="horizontal"?w.clientX:w.clientY,l=w=>{let T=Bt(t.current,r,n),P=g(w);return r?T-P:P-T},m=useRef(!1),v=useRef(0),x=useRef({onPositionChange:a,onDrag:s});x.current.onDrag=s,x.current.onPositionChange=a;let h=w=>{w.preventDefault();let T=l(w);m.current||(m.current=!0,x.current.onDrag&&x.current.onDrag(!0),x.current.onPositionChange&&x.current.onPositionChange(T)),v.current!==T&&(v.current=T,a&&a(T));},S=w=>{let T=w.target;m.current=!1;let P=l(w);x.current.onDrag&&x.current.onDrag(!1),x.current.onPositionChange&&x.current.onPositionChange(P),xe.splice(xe.indexOf(T),1),window.removeEventListener("mouseup",S,!1),window.removeEventListener("mousemove",h,!1);};return {onMouseDown:w=>{let T=w.currentTarget;xe.some(P=>T.contains(P))||(xe.push(T),window.addEventListener("mousemove",h,!1),window.addEventListener("mouseup",S,!1));},onMouseEnter:()=>{o&&o(!0);},onMouseOut:()=>{o&&o(!1);},onKeyDown:w=>{switch(w.key){case"Left":case"ArrowLeft":n==="horizontal"&&(w.preventDefault(),c&&!r?c():i&&r&&i());break;case"Up":case"ArrowUp":n==="vertical"&&(w.preventDefault(),c&&!r?c():i&&r&&i());break;case"Right":case"ArrowRight":n==="horizontal"&&(w.preventDefault(),i&&!r?i():c&&r&&c());break;case"Down":case"ArrowDown":n==="vertical"&&(w.preventDefault(),i&&!r?i():c&&r&&c());break;case"Home":w.preventDefault(),b&&b();break;case"End":w.preventDefault(),f&&f();break;case"Enter":w.preventDefault(),y&&y();break}}}}var tn={};E(tn,"useGlobalListeners",()=>le);function le(){let e=useRef(new Map),t=useCallback((o,s,a,i)=>{let c=i!=null&&i.once?(...f)=>{e.current.delete(a),a(...f);}:a;e.current.set(a,{type:s,eventTarget:o,fn:c,options:i}),o.addEventListener(s,a,i);},[]),r=useCallback((o,s,a,i)=>{var c;let f=((c=e.current.get(a))===null||c===void 0?void 0:c.fn)||a;o.removeEventListener(s,f,i),e.current.delete(a);},[]),n=useCallback(()=>{e.current.forEach((o,s)=>{r(o.eventTarget,o.type,s,o.options);});},[r]);return useEffect(()=>n,[n]),{addGlobalListener:t,removeGlobalListener:r,removeAllGlobalListeners:n}}var rn={};E(rn,"useLabels",()=>nn);function nn(e,t){let{id:r,"aria-label":n,"aria-labelledby":o}=e;return r=Qe(r),o&&n?o=[...new Set([...o.trim().split(/\s+/),r])].join(" "):o&&(o=o.trim().split(/\s+/).join(" ")),!n&&!o&&t&&(n=t),{id:r,"aria-label":n,"aria-labelledby":o}}var on={};E(on,"useObjectRef",()=>sn);function sn(e){let t=useRef();return I(()=>{!e||(typeof e=="function"?e(t.current):e.current=t.current);},[e]),t}var an={};E(an,"useUpdateEffect",()=>un);function un(e,t){let r=useRef(!0);useEffect(()=>{r.current?r.current=!1:e();},t);}var cn={};E(cn,"useResizeObserver",()=>fn);function ln(){return typeof window.ResizeObserver<"u"}function fn(e){let{ref:t,onResize:r}=e;useEffect(()=>{let n=t==null?void 0:t.current;if(!!n)if(ln()){let o=new window.ResizeObserver(s=>{!s.length||r();});return o.observe(n),()=>{n&&o.unobserve(n);}}else return window.addEventListener("resize",r,!1),()=>{window.removeEventListener("resize",r,!1);}},[r,t]);}var dn={};E(dn,"useSyncRef",()=>Z);function Z(e,t){I(()=>{if(e&&e.ref&&t)return e.ref.current=t.current,()=>{e.ref.current=null;}},[e,t]);}var pn={};E(pn,"getScrollParent",()=>bn);function bn(e){for(;e&&!$n(e);)e=e.parentElement;return e||document.scrollingElement||document.documentElement}function $n(e){let t=window.getComputedStyle(e);return /(auto|scroll)/.test(t.overflow+t.overflowX+t.overflowY)}var vn={};E(vn,"useViewportSize",()=>gn);var B=typeof window<"u"&&window.visualViewport;function gn(){let[e,t]=useState(()=>kt());return useEffect(()=>{let r=()=>{t(n=>{let o=kt();return o.width===n.width&&o.height===n.height?n:o});};return B?B.addEventListener("resize",r):window.addEventListener("resize",r),()=>{B?B.removeEventListener("resize",r):window.removeEventListener("resize",r);}},[]),e}function kt(){return {width:(B==null?void 0:B.width)||window.innerWidth,height:(B==null?void 0:B.height)||window.innerHeight}}var mn={};E(mn,"useDescription",()=>tt);var hn=0,_e=new Map;function tt(e){let[t,r]=useState(null);return I(()=>{if(!e)return;let n=_e.get(e);if(n)r(n.element.id);else {let o=`react-aria-description-${hn++}`;r(o);let s=document.createElement("div");s.id=o,s.style.display="none",s.textContent=e,document.body.appendChild(s),n={refCount:0,element:s},_e.set(e,n);}return n.refCount++,()=>{--n.refCount===0&&(n.element.remove(),_e.delete(e));}},[e]),{"aria-describedby":e?t:void 0}}var Y={};E(Y,"isMac",()=>fe);E(Y,"isIPhone",()=>Ht);E(Y,"isIPad",()=>Wt);E(Y,"isIOS",()=>de);E(Y,"isAppleDevice",()=>yn);E(Y,"isWebKit",()=>Pn);E(Y,"isChrome",()=>Gt);E(Y,"isAndroid",()=>En);function rt(e){var t;return typeof window>"u"||window.navigator==null?!1:((t=window.navigator.userAgentData)===null||t===void 0?void 0:t.brands.some(r=>e.test(r.brand)))||e.test(window.navigator.userAgent)}function nt(e){return typeof window<"u"&&window.navigator!=null?e.test((window.navigator.userAgentData||window.navigator).platform):!1}function fe(){return nt(/^Mac/i)}function Ht(){return nt(/^iPhone/i)}function Wt(){return nt(/^iPad/i)||fe()&&navigator.maxTouchPoints>1}function de(){return Ht()||Wt()}function yn(){return fe()||de()}function Pn(){return rt(/AppleWebKit/i)&&!Gt()}function Gt(){return rt(/Chrome/i)}function En(){return rt(/Android/i)}var xn={};E(xn,"useEvent",()=>ot);function ot(e,t,r,n){let o=useRef(r);o.current=r;let s=r==null;useEffect(()=>{if(s)return;let a=e.current,i=c=>o.current.call(this,c);return a.addEventListener(t,i,n),()=>{a.removeEventListener(t,i,n);}},[e,t,n,s]);}var wn={};E(wn,"useValueEffect",()=>Ut);function Ut(e){let[t,r]=useState(e),n=useRef(t),o=useRef(null);n.current=t;let s=useRef(null);s.current=()=>{let i=o.current.next();if(i.done){o.current=null;return}t===i.value?s.current():r(i.value);},I(()=>{o.current&&s.current();});let a=useCallback(i=>{o.current=i(n.current),s.current();},[o,s]);return [t,a]}var Tn={};E(Tn,"scrollIntoView",()=>Sn);function Sn(e,t){let r=Rt(e,t,"left"),n=Rt(e,t,"top"),o=t.offsetWidth,s=t.offsetHeight,a=e.scrollLeft,i=e.scrollTop,c=a+e.offsetWidth,f=i+e.offsetHeight;r<=a?a=r:r+o>c&&(a+=r+o-c),n<=i?i=n:n+s>f&&(i+=n+s-f),e.scrollLeft=a,e.scrollTop=i;}function Rt(e,t,r){let n=r==="left"?"offsetLeft":"offsetTop",o=0;for(;t.offsetParent&&(o+=t[n],t.offsetParent!==e);){if(t.offsetParent.contains(e)){o-=e[n];break}t=t.offsetParent;}return o}function F(e,t,r,n){Object.defineProperty(e,t,{get:r,set:n,enumerable:!0,configurable:!0});}var Ln={};F(Ln,"Pressable",()=>Nn);var Fn={};F(Fn,"usePress",()=>$e);var re="default",ut="",Fe=new WeakMap;function ct(e){de()?(re==="default"&&(ut=document.documentElement.style.webkitUserSelect,document.documentElement.style.webkitUserSelect="none"),re="disabled"):e&&(Fe.set(e,e.style.userSelect),e.style.userSelect="none");}function pe(e){if(de()){if(re!=="disabled")return;re="restoring",setTimeout(()=>{ce(()=>{re==="restoring"&&(document.documentElement.style.webkitUserSelect==="none"&&(document.documentElement.style.webkitUserSelect=ut||""),ut="",re="default");});},300);}else if(e&&Fe.has(e)){let t=Fe.get(e);e.style.userSelect==="none"&&(e.style.userSelect=t),e.getAttribute("style")===""&&e.removeAttribute("style"),Fe.delete(e);}}function lt(e){return e.mozInputSource===0&&e.isTrusted?!0:e.detail===0&&!e.pointerType}var ft=class{isDefaultPrevented(){return this.nativeEvent.defaultPrevented}preventDefault(){this.defaultPrevented=!0,this.nativeEvent.preventDefault();}stopPropagation(){this.nativeEvent.stopPropagation(),this.isPropagationStopped=()=>!0;}isPropagationStopped(){return !1}persist(){}constructor(t,r){this.nativeEvent=r,this.target=r.target,this.currentTarget=r.currentTarget,this.relatedTarget=r.relatedTarget,this.bubbles=r.bubbles,this.cancelable=r.cancelable,this.defaultPrevented=r.defaultPrevented,this.eventPhase=r.eventPhase,this.isTrusted=r.isTrusted,this.timeStamp=r.timeStamp,this.type=t;}};function Qt(e){let t=useRef({isFocused:!1,onBlur:e,observer:null});return t.current.onBlur=e,I(()=>{let r=t.current;return ()=>{r.observer&&(r.observer.disconnect(),r.observer=null);}},[]),useCallback(r=>{if(r.target instanceof HTMLButtonElement||r.target instanceof HTMLInputElement||r.target instanceof HTMLTextAreaElement||r.target instanceof HTMLSelectElement){t.current.isFocused=!0;let n=r.target,o=s=>{var a,i;t.current.isFocused=!1,n.disabled&&((i=(a=t.current).onBlur)===null||i===void 0||i.call(a,new ft("blur",s))),t.current.observer&&(t.current.observer.disconnect(),t.current.observer=null);};n.addEventListener("focusout",o,{once:!0}),t.current.observer=new MutationObserver(()=>{t.current.isFocused&&n.disabled&&(t.current.observer.disconnect(),n.dispatchEvent(new FocusEvent("blur")),n.dispatchEvent(new FocusEvent("focusout",{bubbles:!0})));}),t.current.observer.observe(n,{attributes:!0,attributeFilter:["disabled"]});}},[])}var Ce=H.createContext(null);Ce.displayName="PressResponderContext";function Cn(e){let t=useContext(Ce);if(t){let{register:r,...n}=t;e=M(n,e),r();}return Z(t,e.ref),e}function $e(e){let{onPress:t,onPressChange:r,onPressStart:n,onPressEnd:o,onPressUp:s,isDisabled:a,isPressed:i,preventFocusOnPress:c,shouldCancelOnPointerExit:f,allowTextSelectionOnPress:b,ref:y,...g}=Cn(e),l=useRef(null);l.current={onPress:t,onPressChange:r,onPressStart:n,onPressEnd:o,onPressUp:s,isDisabled:a,shouldCancelOnPointerExit:f};let[m,v]=useState(!1),x=useRef({isPressed:!1,ignoreEmulatedMouseEvents:!1,ignoreClickAfterPress:!1,didFirePressStart:!1,activePointerId:null,target:null,isOverTarget:!1,pointerType:null}),{addGlobalListener:h,removeAllGlobalListeners:S}=le(),L=useMemo(()=>{let u=x.current,k=(p,N)=>{let{onPressStart:d,onPressChange:$,isDisabled:ge}=l.current;ge||u.didFirePressStart||(d&&d({type:"pressstart",pointerType:N,target:p.currentTarget,shiftKey:p.shiftKey,metaKey:p.metaKey,ctrlKey:p.ctrlKey,altKey:p.altKey}),$&&$(!0),u.didFirePressStart=!0,v(!0));},C=(p,N,d=!0)=>{let{onPressEnd:$,onPressChange:ge,onPress:Ct,isDisabled:mr}=l.current;!u.didFirePressStart||(u.ignoreClickAfterPress=!0,u.didFirePressStart=!1,$&&$({type:"pressend",pointerType:N,target:p.currentTarget,shiftKey:p.shiftKey,metaKey:p.metaKey,ctrlKey:p.ctrlKey,altKey:p.altKey}),ge&&ge(!1),v(!1),Ct&&d&&!mr&&Ct({type:"press",pointerType:N,target:p.currentTarget,shiftKey:p.shiftKey,metaKey:p.metaKey,ctrlKey:p.ctrlKey,altKey:p.altKey}));},w=(p,N)=>{let{onPressUp:d,isDisabled:$}=l.current;$||d&&d({type:"pressup",pointerType:N,target:p.currentTarget,shiftKey:p.shiftKey,metaKey:p.metaKey,ctrlKey:p.ctrlKey,altKey:p.altKey});},T=p=>{u.isPressed&&(u.isOverTarget&&C(G(u.target,p),u.pointerType,!1),u.isPressed=!1,u.isOverTarget=!1,u.activePointerId=null,u.pointerType=null,S(),b||pe(u.target));},P={onKeyDown(p){st(p.nativeEvent)&&p.currentTarget.contains(p.target)&&(Yt(p.target)&&p.preventDefault(),p.stopPropagation(),!u.isPressed&&!p.repeat&&(u.target=p.currentTarget,u.isPressed=!0,k(p,"keyboard"),h(document,"keyup",Ft,!1)));},onKeyUp(p){st(p.nativeEvent)&&!p.repeat&&p.currentTarget.contains(p.target)&&w(G(u.target,p),"keyboard");},onClick(p){p&&!p.currentTarget.contains(p.target)||p&&p.button===0&&(p.stopPropagation(),a&&p.preventDefault(),!u.ignoreClickAfterPress&&!u.ignoreEmulatedMouseEvents&&(u.pointerType==="virtual"||lt(p.nativeEvent))&&(!a&&!c&&W(p.currentTarget),k(p,"virtual"),w(p,"virtual"),C(p,"virtual")),u.ignoreEmulatedMouseEvents=!1,u.ignoreClickAfterPress=!1);}},Ft=p=>{if(u.isPressed&&st(p)){Yt(p.target)&&p.preventDefault(),p.stopPropagation(),u.isPressed=!1;let N=p.target;C(G(u.target,p),"keyboard",u.target.contains(N)),S(),(u.target.contains(N)&&Zt(u.target)||u.target.getAttribute("role")==="link")&&u.target.click();}};if(typeof PointerEvent<"u"){P.onPointerDown=$=>{if(!($.button!==0||!$.currentTarget.contains($.target))){if(Kn($.nativeEvent)){u.pointerType="virtual";return}at($.currentTarget)&&$.preventDefault(),u.pointerType=$.pointerType,$.stopPropagation(),u.isPressed||(u.isPressed=!0,u.isOverTarget=!0,u.activePointerId=$.pointerId,u.target=$.currentTarget,!a&&!c&&W($.currentTarget),b||ct(u.target),k($,u.pointerType),h(document,"pointermove",p,!1),h(document,"pointerup",N,!1),h(document,"pointercancel",d,!1));}},P.onMouseDown=$=>{!$.currentTarget.contains($.target)||$.button===0&&(at($.currentTarget)&&$.preventDefault(),$.stopPropagation());},P.onPointerUp=$=>{!$.currentTarget.contains($.target)||u.pointerType==="virtual"||$.button===0&&ee($,$.currentTarget)&&w($,u.pointerType||$.pointerType);};let p=$=>{$.pointerId===u.activePointerId&&(ee($,u.target)?u.isOverTarget||(u.isOverTarget=!0,k(G(u.target,$),u.pointerType)):u.isOverTarget&&(u.isOverTarget=!1,C(G(u.target,$),u.pointerType,!1),l.current.shouldCancelOnPointerExit&&T($)));},N=$=>{$.pointerId===u.activePointerId&&u.isPressed&&$.button===0&&(ee($,u.target)?C(G(u.target,$),u.pointerType):u.isOverTarget&&C(G(u.target,$),u.pointerType,!1),u.isPressed=!1,u.isOverTarget=!1,u.activePointerId=null,u.pointerType=null,S(),b||pe(u.target));},d=$=>{T($);};P.onDragStart=$=>{!$.currentTarget.contains($.target)||T($);};}else {P.onMouseDown=d=>{d.button!==0||!d.currentTarget.contains(d.target)||(at(d.currentTarget)&&d.preventDefault(),d.stopPropagation(),!u.ignoreEmulatedMouseEvents&&(u.isPressed=!0,u.isOverTarget=!0,u.target=d.currentTarget,u.pointerType=lt(d.nativeEvent)?"virtual":"mouse",!a&&!c&&W(d.currentTarget),k(d,u.pointerType),h(document,"mouseup",p,!1)));},P.onMouseEnter=d=>{!d.currentTarget.contains(d.target)||(d.stopPropagation(),u.isPressed&&!u.ignoreEmulatedMouseEvents&&(u.isOverTarget=!0,k(d,u.pointerType)));},P.onMouseLeave=d=>{!d.currentTarget.contains(d.target)||(d.stopPropagation(),u.isPressed&&!u.ignoreEmulatedMouseEvents&&(u.isOverTarget=!1,C(d,u.pointerType,!1),l.current.shouldCancelOnPointerExit&&T(d)));},P.onMouseUp=d=>{!d.currentTarget.contains(d.target)||!u.ignoreEmulatedMouseEvents&&d.button===0&&w(d,u.pointerType);};let p=d=>{if(d.button===0){if(u.isPressed=!1,S(),u.ignoreEmulatedMouseEvents){u.ignoreEmulatedMouseEvents=!1;return}ee(d,u.target)?C(G(u.target,d),u.pointerType):u.isOverTarget&&C(G(u.target,d),u.pointerType,!1),u.isOverTarget=!1;}};P.onTouchStart=d=>{if(!d.currentTarget.contains(d.target))return;d.stopPropagation();let $=Mn(d.nativeEvent);!$||(u.activePointerId=$.identifier,u.ignoreEmulatedMouseEvents=!0,u.isOverTarget=!0,u.isPressed=!0,u.target=d.currentTarget,u.pointerType="touch",!a&&!c&&W(d.currentTarget),b||ct(u.target),k(d,u.pointerType),h(window,"scroll",N,!0));},P.onTouchMove=d=>{if(!d.currentTarget.contains(d.target)||(d.stopPropagation(),!u.isPressed))return;let $=zt(d.nativeEvent,u.activePointerId);$&&ee($,d.currentTarget)?u.isOverTarget||(u.isOverTarget=!0,k(d,u.pointerType)):u.isOverTarget&&(u.isOverTarget=!1,C(d,u.pointerType,!1),l.current.shouldCancelOnPointerExit&&T(d));},P.onTouchEnd=d=>{if(!d.currentTarget.contains(d.target)||(d.stopPropagation(),!u.isPressed))return;let $=zt(d.nativeEvent,u.activePointerId);$&&ee($,d.currentTarget)?(w(d,u.pointerType),C(d,u.pointerType)):u.isOverTarget&&C(d,u.pointerType,!1),u.isPressed=!1,u.activePointerId=null,u.isOverTarget=!1,u.ignoreEmulatedMouseEvents=!0,b||pe(u.target),S();},P.onTouchCancel=d=>{!d.currentTarget.contains(d.target)||(d.stopPropagation(),u.isPressed&&T(d));};let N=d=>{u.isPressed&&d.target.contains(u.target)&&T({currentTarget:u.target,shiftKey:!1,ctrlKey:!1,metaKey:!1,altKey:!1});};P.onDragStart=d=>{!d.currentTarget.contains(d.target)||T(d);};}return P},[h,a,c,S,b]);return useEffect(()=>()=>{b||pe(x.current.target);},[b]),{isPressed:i||m,pressProps:M(g,L)}}function Zt(e){return e.tagName==="A"&&e.hasAttribute("href")}function st(e){let{key:t,code:r,target:n}=e,o=n,{tagName:s,isContentEditable:a}=o,i=o.getAttribute("role");return (t==="Enter"||t===" "||t==="Spacebar"||r==="Space")&&s!=="INPUT"&&s!=="TEXTAREA"&&a!==!0&&(!Zt(o)||i==="button"&&t!=="Enter")&&!(i==="link"&&t!=="Enter")}function Mn(e){let{targetTouches:t}=e;return t.length>0?t[0]:null}function zt(e,t){let r=e.changedTouches;for(let n=0;n<r.length;n++){let o=r[n];if(o.identifier===t)return o}return null}function G(e,t){return {currentTarget:e,shiftKey:t.shiftKey,ctrlKey:t.ctrlKey,metaKey:t.metaKey,altKey:t.altKey}}function Dn(e){let t=e.width/2||e.radiusX||0,r=e.height/2||e.radiusY||0;return {top:e.clientY-r,right:e.clientX+t,bottom:e.clientY+r,left:e.clientX-t}}function In(e,t){return !(e.left>t.right||t.left>e.right||e.top>t.bottom||t.top>e.bottom)}function ee(e,t){let r=t.getBoundingClientRect(),n=Dn(e);return In(r,n)}function at(e){return !e.draggable}function Yt(e){return !((e.tagName==="INPUT"||e.tagName==="BUTTON")&&e.type==="submit")}function Kn(e){return e.width===0&&e.height===0||e.width===1&&e.height===1&&e.pressure===0&&e.detail===0&&e.pointerType==="mouse"}var Nn=H.forwardRef(({children:e,...t},r)=>{let n=useRef();r=r??n;let{pressProps:o}=$e({...t,ref:r}),s=H.Children.only(e);return H.cloneElement(s,{ref:r,...M(s.props,o)})}),On={};F(On,"PressResponder",()=>kn);var kn=H.forwardRef(({children:e,...t},r)=>{let n=useRef(!1),o=useContext(Ce),s=M(o||{},{...t,ref:r||(o==null?void 0:o.ref),register(){n.current=!0,o&&o.register();}});return Z(o,r),useEffect(()=>{n.current||console.warn("A PressResponder was rendered without a pressable child. Either call the usePress hook, or wrap your DOM node with <Pressable> component.");},[]),H.createElement(Ce.Provider,{value:s},e)}),Rn={};F(Rn,"useFocus",()=>Ke);function Ke(e){let{isDisabled:t,onFocus:r,onBlur:n,onFocusChange:o}=e,s=useCallback(c=>{if(c.target===c.currentTarget)return n&&n(c),o&&o(!1),!0},[n,o]),a=Qt(s),i=useCallback(c=>{c.target===c.currentTarget&&(r&&r(c),o&&o(!0),a(c));},[o,r,a]);return {focusProps:{onFocus:!t&&(r||o||n)?i:void 0,onBlur:!t&&(n||o)?s:null}}}var se={};F(se,"isFocusVisible",()=>ve);F(se,"getInteractionModality",()=>$t);F(se,"setInteractionModality",()=>Gn);F(se,"useInteractionModality",()=>Un);F(se,"useFocusVisible",()=>Yn);F(se,"useFocusVisibleListener",()=>Oe);var U=null,be=new Set,Xt=!1,_=!1,dt=!1,An={Tab:!0,Escape:!0};function Ne(e,t){for(let r of be)r(e,t);}function Bn(e){return !(e.metaKey||!fe()&&e.altKey||e.ctrlKey||e.key==="Control"||e.key==="Shift"||e.key==="Meta")}function jt(e){_=!0,Bn(e)&&(U="keyboard",Ne("keyboard",e));}function te(e){U="pointer",(e.type==="mousedown"||e.type==="pointerdown")&&(_=!0,Ne("pointer",e));}function Vn(e){lt(e)&&(_=!0,U="virtual");}function Hn(e){e.target===window||e.target===document||(!_&&!dt&&(U="virtual",Ne("virtual",e)),_=!1,dt=!1);}function Wn(){_=!1,dt=!0;}function Me(){if(typeof window>"u"||Xt)return;let e=HTMLElement.prototype.focus;HTMLElement.prototype.focus=function(){_=!0,e.apply(this,arguments);},document.addEventListener("keydown",jt,!0),document.addEventListener("keyup",jt,!0),document.addEventListener("click",Vn,!0),window.addEventListener("focus",Hn,!0),window.addEventListener("blur",Wn,!1),typeof PointerEvent<"u"?(document.addEventListener("pointerdown",te,!0),document.addEventListener("pointermove",te,!0),document.addEventListener("pointerup",te,!0)):(document.addEventListener("mousedown",te,!0),document.addEventListener("mousemove",te,!0),document.addEventListener("mouseup",te,!0)),Xt=!0;}typeof document<"u"&&(document.readyState!=="loading"?Me():document.addEventListener("DOMContentLoaded",Me));function ve(){return U!=="pointer"}function $t(){return U}function Gn(e){U=e,Ne(e,null);}function Un(){Me();let[e,t]=useState(U);return useEffect(()=>{let r=()=>{t(U);};return be.add(r),()=>{be.delete(r);}},[]),e}function zn(e,t,r){return !(e&&t==="keyboard"&&r instanceof KeyboardEvent&&!An[r.key])}function Yn(e={}){let{isTextInput:t,autoFocus:r}=e,[n,o]=useState(r||ve());return Oe(s=>{o(s);},[t],{isTextInput:t}),{isFocusVisible:n}}function Oe(e,t,r){Me(),useEffect(()=>{let n=(o,s)=>{!zn(r==null?void 0:r.isTextInput,o,s)||e(ve());};return be.add(n),()=>{be.delete(n);}},t);}var Xn={};F(Xn,"useFocusWithin",()=>vt);function vt(e){let{isDisabled:t,onBlurWithin:r,onFocusWithin:n,onFocusWithinChange:o}=e,s=useRef({isFocusWithin:!1}),a=useCallback(f=>{s.current.isFocusWithin&&!f.currentTarget.contains(f.relatedTarget)&&(s.current.isFocusWithin=!1,r&&r(f),o&&o(!1));},[r,o,s]),i=Qt(a),c=useCallback(f=>{s.current.isFocusWithin||(n&&n(f),o&&o(!0),s.current.isFocusWithin=!0,i(f));},[n,o,i]);return t?{focusWithinProps:{onFocus:null,onBlur:null}}:{focusWithinProps:{onFocus:c,onBlur:a}}}var jn={};F(jn,"useHover",()=>gt);var De=!1,it=0;function pt(){De=!0,setTimeout(()=>{De=!1;},50);}function _t(e){e.pointerType==="touch"&&pt();}function _n(){if(!(typeof document>"u"))return typeof PointerEvent<"u"?document.addEventListener("pointerup",_t):document.addEventListener("touchend",pt),it++,()=>{it--,!(it>0)&&(typeof PointerEvent<"u"?document.removeEventListener("pointerup",_t):document.removeEventListener("touchend",pt));}}function gt(e){let{onHoverStart:t,onHoverChange:r,onHoverEnd:n,isDisabled:o}=e,[s,a]=useState(!1),i=useRef({isHovered:!1,ignoreEmulatedMouseEvents:!1,pointerType:"",target:null}).current;useEffect(_n,[]);let{hoverProps:c,triggerHoverEnd:f}=useMemo(()=>{let b=(l,m)=>{if(i.pointerType=m,o||m==="touch"||i.isHovered||!l.currentTarget.contains(l.target))return;i.isHovered=!0;let v=l.currentTarget;i.target=v,t&&t({type:"hoverstart",target:v,pointerType:m}),r&&r(!0),a(!0);},y=(l,m)=>{if(i.pointerType="",i.target=null,m==="touch"||!i.isHovered)return;i.isHovered=!1;let v=l.currentTarget;n&&n({type:"hoverend",target:v,pointerType:m}),r&&r(!1),a(!1);},g={};return typeof PointerEvent<"u"?(g.onPointerEnter=l=>{De&&l.pointerType==="mouse"||b(l,l.pointerType);},g.onPointerLeave=l=>{!o&&l.currentTarget.contains(l.target)&&y(l,l.pointerType);}):(g.onTouchStart=()=>{i.ignoreEmulatedMouseEvents=!0;},g.onMouseEnter=l=>{!i.ignoreEmulatedMouseEvents&&!De&&b(l,"mouse"),i.ignoreEmulatedMouseEvents=!1;},g.onMouseLeave=l=>{!o&&l.currentTarget.contains(l.target)&&y(l,"mouse");}),{hoverProps:g,triggerHoverEnd:y}},[t,r,n,o,i]);return useEffect(()=>{o&&f({currentTarget:i.target},i.pointerType);},[o]),{hoverProps:c,isHovered:s}}var qn={};F(qn,"useInteractOutside",()=>Jn);function Jn(e){let{ref:t,onInteractOutside:r,isDisabled:n,onInteractOutsideStart:o}=e,a=useRef({isPointerDown:!1,ignoreEmulatedMouseEvents:!1,onInteractOutside:r,onInteractOutsideStart:o}).current;a.onInteractOutside=r,a.onInteractOutsideStart=o,useEffect(()=>{if(n)return;let i=c=>{Le(c,t)&&a.onInteractOutside&&(a.onInteractOutsideStart&&a.onInteractOutsideStart(c),a.isPointerDown=!0);};if(typeof PointerEvent<"u"){let c=f=>{a.isPointerDown&&a.onInteractOutside&&Le(f,t)&&(a.isPointerDown=!1,a.onInteractOutside(f));};return document.addEventListener("pointerdown",i,!0),document.addEventListener("pointerup",c,!0),()=>{document.removeEventListener("pointerdown",i,!0),document.removeEventListener("pointerup",c,!0);}}else {let c=b=>{a.ignoreEmulatedMouseEvents?a.ignoreEmulatedMouseEvents=!1:a.isPointerDown&&a.onInteractOutside&&Le(b,t)&&(a.isPointerDown=!1,a.onInteractOutside(b));},f=b=>{a.ignoreEmulatedMouseEvents=!0,a.onInteractOutside&&a.isPointerDown&&Le(b,t)&&(a.isPointerDown=!1,a.onInteractOutside(b));};return document.addEventListener("mousedown",i,!0),document.addEventListener("mouseup",c,!0),document.addEventListener("touchstart",i,!0),document.addEventListener("touchend",f,!0),()=>{document.removeEventListener("mousedown",i,!0),document.removeEventListener("mouseup",c,!0),document.removeEventListener("touchstart",i,!0),document.removeEventListener("touchend",f,!0);}}},[t,a,n]);}function Le(e,t){if(e.button>0)return !1;if(e.target){let r=e.target.ownerDocument;if(!r||!r.documentElement.contains(e.target))return !1}return t.current&&!t.current.contains(e.target)}var Qn={};F(Qn,"useKeyboard",()=>mt);function qt(e){if(!e)return;let t=!0;return r=>{let n={...r,preventDefault(){r.preventDefault();},isDefaultPrevented(){return r.isDefaultPrevented()},stopPropagation(){console.error("stopPropagation is now the default behavior for events in React Spectrum. You can use continuePropagation() to revert this behavior.");},continuePropagation(){t=!1;}};e(n),t&&r.stopPropagation();}}function mt(e){return {keyboardProps:e.isDisabled?{}:{onKeyDown:qt(e.onKeyDown),onKeyUp:qt(e.onKeyUp)}}}var Zn={};F(Zn,"useMove",()=>eo);function eo(e){let{onMoveStart:t,onMove:r,onMoveEnd:n}=e,o=useRef({didMove:!1,lastPosition:null,id:null}),{addGlobalListener:s,removeGlobalListener:a}=le();return {moveProps:useMemo(()=>{let c={},f=()=>{ct(),o.current.didMove=!1;},b=(l,m,v,x)=>{v===0&&x===0||(o.current.didMove||(o.current.didMove=!0,t==null||t({type:"movestart",pointerType:m,shiftKey:l.shiftKey,metaKey:l.metaKey,ctrlKey:l.ctrlKey,altKey:l.altKey})),r({type:"move",pointerType:m,deltaX:v,deltaY:x,shiftKey:l.shiftKey,metaKey:l.metaKey,ctrlKey:l.ctrlKey,altKey:l.altKey}));},y=(l,m)=>{pe(),o.current.didMove&&(n==null||n({type:"moveend",pointerType:m,shiftKey:l.shiftKey,metaKey:l.metaKey,ctrlKey:l.ctrlKey,altKey:l.altKey}));};if(typeof PointerEvent>"u"){let l=h=>{h.button===0&&(b(h,"mouse",h.pageX-o.current.lastPosition.pageX,h.pageY-o.current.lastPosition.pageY),o.current.lastPosition={pageX:h.pageX,pageY:h.pageY});},m=h=>{h.button===0&&(y(h,"mouse"),a(window,"mousemove",l,!1),a(window,"mouseup",m,!1));};c.onMouseDown=h=>{h.button===0&&(f(),h.stopPropagation(),h.preventDefault(),o.current.lastPosition={pageX:h.pageX,pageY:h.pageY},s(window,"mousemove",l,!1),s(window,"mouseup",m,!1));};let v=h=>{let S=[...h.changedTouches].findIndex(({identifier:L})=>L===o.current.id);if(S>=0){let{pageX:L,pageY:u}=h.changedTouches[S];b(h,"touch",L-o.current.lastPosition.pageX,u-o.current.lastPosition.pageY),o.current.lastPosition={pageX:L,pageY:u};}},x=h=>{[...h.changedTouches].findIndex(({identifier:L})=>L===o.current.id)>=0&&(y(h,"touch"),o.current.id=null,a(window,"touchmove",v),a(window,"touchend",x),a(window,"touchcancel",x));};c.onTouchStart=h=>{if(h.changedTouches.length===0||o.current.id!=null)return;let{pageX:S,pageY:L,identifier:u}=h.changedTouches[0];f(),h.stopPropagation(),h.preventDefault(),o.current.lastPosition={pageX:S,pageY:L},o.current.id=u,s(window,"touchmove",v,!1),s(window,"touchend",x,!1),s(window,"touchcancel",x,!1);};}else {let l=v=>{if(v.pointerId===o.current.id){let x=v.pointerType||"mouse";b(v,x,v.pageX-o.current.lastPosition.pageX,v.pageY-o.current.lastPosition.pageY),o.current.lastPosition={pageX:v.pageX,pageY:v.pageY};}},m=v=>{if(v.pointerId===o.current.id){let x=v.pointerType||"mouse";y(v,x),o.current.id=null,a(window,"pointermove",l,!1),a(window,"pointerup",m,!1),a(window,"pointercancel",m,!1);}};c.onPointerDown=v=>{v.button===0&&o.current.id==null&&(f(),v.stopPropagation(),v.preventDefault(),o.current.lastPosition={pageX:v.pageX,pageY:v.pageY},o.current.id=v.pointerId,s(window,"pointermove",l,!1),s(window,"pointerup",m,!1),s(window,"pointercancel",m,!1));};}let g=(l,m,v)=>{f(),b(l,"keyboard",m,v),y(l,"keyboard");};return c.onKeyDown=l=>{switch(l.key){case"Left":case"ArrowLeft":l.preventDefault(),l.stopPropagation(),g(l,-1,0);break;case"Right":case"ArrowRight":l.preventDefault(),l.stopPropagation(),g(l,1,0);break;case"Up":case"ArrowUp":l.preventDefault(),l.stopPropagation(),g(l,0,-1);break;case"Down":case"ArrowDown":l.preventDefault(),l.stopPropagation(),g(l,0,1);break}},c},[o,t,r,n,s,a])}}var to={};F(to,"useScrollWheel",()=>ro);function ro(e,t){let{onScroll:r,isDisabled:n}=e,o=useCallback(s=>{s.ctrlKey||(s.preventDefault(),s.stopPropagation(),r&&r({deltaX:s.deltaX,deltaY:s.deltaY}));},[r]);ot(t,"wheel",n?null:o);}var no={};F(no,"useLongPress",()=>so);var oo=500;function so(e){let{isDisabled:t,onLongPressStart:r,onLongPressEnd:n,onLongPress:o,threshold:s=oo,accessibilityDescription:a}=e,i=useRef(null),{addGlobalListener:c,removeGlobalListener:f}=le(),{pressProps:b}=$e({isDisabled:t,onPressStart(g){if((g.pointerType==="mouse"||g.pointerType==="touch")&&(r&&r({...g,type:"longpressstart"}),i.current=setTimeout(()=>{g.target.dispatchEvent(new PointerEvent("pointercancel",{bubbles:!0})),o&&o({...g,type:"longpress"}),i.current=null;},s),g.pointerType==="touch")){let l=m=>{m.preventDefault();};c(g.target,"contextmenu",l,{once:!0}),c(window,"pointerup",()=>{setTimeout(()=>{f(g.target,"contextmenu",l);},30);},{once:!0});}},onPressEnd(g){i.current&&clearTimeout(i.current),n&&(g.pointerType==="mouse"||g.pointerType==="touch")&&n({...g,type:"longpressend"});}}),y=tt(o&&!t?a:null);return {longPressProps:M(b,y)}}function z(e,t,r,n){Object.defineProperty(e,t,{get:r,set:n,enumerable:!0,configurable:!0});}var ke={};z(ke,"FocusScope",()=>co);z(ke,"useFocusManager",()=>lo);z(ke,"getFocusableTreeWalker",()=>O);z(ke,"createFocusManager",()=>ho);var ao={};z(ao,"focusSafely",()=>xt);function xt(e){if($t()==="virtual"){let t=document.activeElement;ce(()=>{document.activeElement===t&&document.contains(e)&&W(e);});}else W(e);}function io(e){if(!(e instanceof HTMLElement)&&!(e instanceof SVGElement))return !1;let{display:t,visibility:r}=e.style,n=t!=="none"&&r!=="hidden"&&r!=="collapse";if(n){let{getComputedStyle:o}=e.ownerDocument.defaultView,{display:s,visibility:a}=o(e);n=s!=="none"&&a!=="hidden"&&a!=="collapse";}return n}function uo(e,t){return !e.hasAttribute("hidden")&&(e.nodeName==="DETAILS"&&t&&t.nodeName!=="SUMMARY"?e.hasAttribute("open"):!0)}function nr(e,t){return e.nodeName!=="#comment"&&io(e)&&uo(e,t)&&(!e.parentElement||nr(e.parentElement,e))}var yt=H.createContext(null),D=null,ie=new Map;function co(e){let{children:t,contain:r,restoreFocus:n,autoFocus:o}=e,s=useRef(),a=useRef(),i=useRef([]),c=useContext(yt),f=c==null?void 0:c.scopeRef;I(()=>{let y=s.current.nextSibling,g=[];for(;y&&y!==a.current;)g.push(y),y=y.nextSibling;i.current=g;},[t,f]),I(()=>(ie.set(i,f),()=>{(i===D||Re(i,D))&&(!f||ie.has(f))&&(D=f),ie.delete(i);}),[i,f]),$o(i,r),mo(i,n,r),go(i,o);let b=fo(i);return H.createElement(yt.Provider,{value:{scopeRef:i,focusManager:b}},H.createElement("span",{"data-focus-scope-start":!0,hidden:!0,ref:s}),t,H.createElement("span",{"data-focus-scope-end":!0,hidden:!0,ref:a}))}function lo(){var e;return (e=useContext(yt))===null||e===void 0?void 0:e.focusManager}function fo(e){return {focusNext(t={}){let r=e.current,{from:n,tabbable:o,wrap:s}=t,a=n||document.activeElement,i=r[0].previousElementSibling,c=O(ae(r),{tabbable:o},r);c.currentNode=A(a,r)?a:i;let f=c.nextNode();return !f&&s&&(c.currentNode=i,f=c.nextNode()),f&&K(f,!0),f},focusPrevious(t={}){let r=e.current,{from:n,tabbable:o,wrap:s}=t,a=n||document.activeElement,i=r[r.length-1].nextElementSibling,c=O(ae(r),{tabbable:o},r);c.currentNode=A(a,r)?a:i;let f=c.previousNode();return !f&&s&&(c.currentNode=i,f=c.previousNode()),f&&K(f,!0),f},focusFirst(t={}){let r=e.current,{tabbable:n}=t,o=O(ae(r),{tabbable:n},r);o.currentNode=r[0].previousElementSibling;let s=o.nextNode();return s&&K(s,!0),s},focusLast(t={}){let r=e.current,{tabbable:n}=t,o=O(ae(r),{tabbable:n},r);o.currentNode=r[r.length-1].nextElementSibling;let s=o.previousNode();return s&&K(s,!0),s}}}var wt=["input:not([disabled]):not([type=hidden])","select:not([disabled])","textarea:not([disabled])","button:not([disabled])","a[href]","area[href]","summary","iframe","object","embed","audio[controls]","video[controls]","[contenteditable]"],po=wt.join(":not([hidden]),")+",[tabindex]:not([disabled]):not([hidden])";wt.push('[tabindex]:not([tabindex="-1"]):not([disabled])');var bo=wt.join(':not([hidden]):not([tabindex="-1"]),');function ae(e){return e[0].parentElement}function $o(e,t){let r=useRef(),n=useRef(null);I(()=>{let o=e.current;if(!t)return;let s=c=>{if(c.key!=="Tab"||c.altKey||c.ctrlKey||c.metaKey||e!==D)return;let f=document.activeElement,b=e.current;if(!A(f,b))return;let y=O(ae(b),{tabbable:!0},b);y.currentNode=f;let g=c.shiftKey?y.previousNode():y.nextNode();g||(y.currentNode=c.shiftKey?b[b.length-1].nextElementSibling:b[0].previousElementSibling,g=c.shiftKey?y.previousNode():y.nextNode()),c.preventDefault(),g&&K(g,!0);},a=c=>{!D||Re(D,e)?(D=e,r.current=c.target):e===D&&!rr(c.target,e)?r.current?r.current.focus():D&&or(D.current):e===D&&(r.current=c.target);},i=c=>{n.current=requestAnimationFrame(()=>{e===D&&!rr(document.activeElement,e)&&(D=e,r.current=c.target,r.current.focus());});};return document.addEventListener("keydown",s,!1),document.addEventListener("focusin",a,!1),o.forEach(c=>c.addEventListener("focusin",a,!1)),o.forEach(c=>c.addEventListener("focusout",i,!1)),()=>{document.removeEventListener("keydown",s,!1),document.removeEventListener("focusin",a,!1),o.forEach(c=>c.removeEventListener("focusin",a,!1)),o.forEach(c=>c.removeEventListener("focusout",i,!1));}},[e,t]),useEffect(()=>()=>cancelAnimationFrame(n.current),[n]);}function vo(e){for(let t of ie.keys())if(A(e,t.current))return !0;return !1}function A(e,t){return t.some(r=>r.contains(e))}function rr(e,t){for(let r of ie.keys())if((r===t||Re(t,r))&&A(e,r.current))return !0;return !1}function Re(e,t){let r=ie.get(t);return r?r===e?!0:Re(e,r):!1}function K(e,t=!1){if(e!=null&&!t)try{xt(e);}catch{}else if(e!=null)try{e.focus();}catch{}}function or(e){let t=e[0].previousElementSibling,r=O(ae(e),{tabbable:!0},e);r.currentNode=t,K(r.nextNode());}function go(e,t){let r=H.useRef(t);useEffect(()=>{r.current&&(D=e,A(document.activeElement,D.current)||or(e.current)),r.current=!1;},[]);}function mo(e,t,r){let n=useRef(typeof document<"u"?document.activeElement:null);I(()=>{let o=n.current;if(!t)return;let s=a=>{if(a.key!=="Tab"||a.altKey||a.ctrlKey||a.metaKey)return;let i=document.activeElement;if(!A(i,e.current))return;let c=O(document.body,{tabbable:!0});c.currentNode=i;let f=a.shiftKey?c.previousNode():c.nextNode();if((!document.body.contains(o)||o===document.body)&&(o=null),(!f||!A(f,e.current))&&o){c.currentNode=o;do f=a.shiftKey?c.previousNode():c.nextNode();while(A(f,e.current));a.preventDefault(),a.stopPropagation(),f?K(f,!0):vo(o)?K(o,!0):i.blur();}};return r||document.addEventListener("keydown",s,!0),()=>{r||document.removeEventListener("keydown",s,!0),t&&o&&A(document.activeElement,e.current)&&requestAnimationFrame(()=>{document.body.contains(o)&&K(o);});}},[e,t,r]);}function O(e,t,r){let n=t!=null&&t.tabbable?bo:po,o=document.createTreeWalker(e,NodeFilter.SHOW_ELEMENT,{acceptNode(s){var a;return !(t==null||(a=t.from)===null||a===void 0)&&a.contains(s)?NodeFilter.FILTER_REJECT:s.matches(n)&&nr(s)&&(!r||A(s,r))&&(!(t!=null&&t.accept)||t.accept(s))?NodeFilter.FILTER_ACCEPT:NodeFilter.FILTER_SKIP}});return t!=null&&t.from&&(o.currentNode=t.from),o}function ho(e,t={}){return {focusNext(r={}){let n=e.current;if(!n)return;let{from:o,tabbable:s=t.tabbable,wrap:a=t.wrap,accept:i=t.accept}=r,c=o||document.activeElement,f=O(n,{tabbable:s,accept:i});n.contains(c)&&(f.currentNode=c);let b=f.nextNode();return !b&&a&&(f.currentNode=n,b=f.nextNode()),b&&K(b,!0),b},focusPrevious(r=t){let n=e.current;if(!n)return;let{from:o,tabbable:s=t.tabbable,wrap:a=t.wrap,accept:i=t.accept}=r,c=o||document.activeElement,f=O(n,{tabbable:s,accept:i});if(n.contains(c))f.currentNode=c;else {let y=ht(f);return y&&K(y,!0),y}let b=f.previousNode();return !b&&a&&(f.currentNode=n,b=ht(f)),b&&K(b,!0),b},focusFirst(r=t){let n=e.current;if(!n)return;let{tabbable:o=t.tabbable,accept:s=t.accept}=r,i=O(n,{tabbable:o,accept:s}).nextNode();return i&&K(i,!0),i},focusLast(r=t){let n=e.current;if(!n)return;let{tabbable:o=t.tabbable,accept:s=t.accept}=r,a=O(n,{tabbable:o,accept:s}),i=ht(a);return i&&K(i,!0),i}}}function ht(e){let t,r;do r=e.lastChild(),r&&(t=r);while(r);return t}var yo={};z(yo,"FocusRing",()=>Eo);var Po={};z(Po,"useFocusRing",()=>sr);function sr(e={}){let{autoFocus:t=!1,isTextInput:r,within:n}=e,o=useRef({isFocused:!1,isFocusVisible:t||ve()}),[s,a]=useState(!1),[i,c]=useState(()=>o.current.isFocused&&o.current.isFocusVisible),f=useCallback(()=>c(o.current.isFocused&&o.current.isFocusVisible),[]),b=useCallback(l=>{o.current.isFocused=l,a(l),f();},[f]);Oe(l=>{o.current.isFocusVisible=l,f();},[],{isTextInput:r});let{focusProps:y}=Ke({isDisabled:n,onFocusChange:b}),{focusWithinProps:g}=vt({isDisabled:!n,onFocusWithinChange:b});return {isFocused:s,isFocusVisible:o.current.isFocused&&i,focusProps:n?g:y}}function Eo(e){let{children:t,focusClass:r,focusRingClass:n}=e,{isFocused:o,isFocusVisible:s,focusProps:a}=sr(e),i=H.Children.only(t);return H.cloneElement(i,M(i.props,{...a,className:ye({[r||""]:o,[n||""]:s})}))}var ar={};z(ar,"FocusableProvider",()=>To);z(ar,"useFocusable",()=>Tt);var ir=H.createContext(null);function xo(e){let t=useContext(ir)||{};Z(t,e);let{ref:r,...n}=t;return n}function wo(e,t){let{children:r,...n}=e,o={...n,ref:t};return H.createElement(ir.Provider,{value:o},r)}var To=H.forwardRef(wo);function Tt(e,t){let{focusProps:r}=Ke(e),{keyboardProps:n}=mt(e),o=M(r,n),s=xo(t),a=e.isDisabled?{}:s,i=useRef(e.autoFocus);return useEffect(()=>{i.current&&t.current&&xt(t.current),i.current=!1;},[t]),{focusableProps:M({...o,tabIndex:e.excludeFromTabOrder&&!e.isDisabled?-1:void 0},a)}}function ur(e,t,r,n){Object.defineProperty(e,t,{get:r,set:n,enumerable:!0,configurable:!0});}var So={};ur(So,"useButton",()=>Ae);function Ae(e,t){let{elementType:r="button",isDisabled:n,onPress:o,onPressStart:s,onPressEnd:a,onPressChange:i,preventFocusOnPress:c,allowFocusWhenDisabled:f,onClick:b,href:y,target:g,rel:l,type:m="button"}=e,v;r==="button"?v={type:m,disabled:n}:v={role:"button",tabIndex:n?void 0:0,href:r==="a"&&n?void 0:y,target:r==="a"?g:void 0,type:r==="input"?m:void 0,disabled:r==="input"?n:void 0,"aria-disabled":!n||r==="input"?void 0:n,rel:r==="a"?l:void 0};let{pressProps:x,isPressed:h}=$e({onPressStart:s,onPressEnd:a,onPressChange:i,onPress:o,isDisabled:n,preventFocusOnPress:c,ref:t}),{focusableProps:S}=Tt(e,t);f&&(S.tabIndex=n?-1:S.tabIndex);let L=M(S,x,et(e,{labelable:!0}));return {isPressed:h,buttonProps:M(v,L,{"aria-haspopup":e["aria-haspopup"],"aria-expanded":e["aria-expanded"],"aria-controls":e["aria-controls"],"aria-pressed":e["aria-pressed"],onClick:u=>{b&&(b(u),console.warn("onClick is deprecated, please use onPress"));}})}}var Lo={};ur(Lo,"useToggleButton",()=>Fo);function Fo(e,t,r){let{isSelected:n}=t,{isPressed:o,buttonProps:s}=Ae({...e,onPress:Se(t.toggle,e.onPress)},r);return {isPressed:o,buttonProps:M(s,{"aria-pressed":n})}}var St=He(Ve());var cr=He(Ve()),lr=({variant:e,type:t,size:r,disabled:n,loading:o,rounded:s})=>{let a={solid:"btn-solid",ghost:"btn-ghost"},i={success:"btn-success",secondary:"btn-secondary",warning:"btn-warning",error:"btn-error",alert:"btn-alert"},c={block:"btn-block",xs:"btn-xs",sm:"btn-sm",md:"btn-md",lg:"btn-lg"};return (0, cr.default)(["btn",e&&a[e],t&&i[t],r&&c[r],n&&"btn-disabled",o&&"btn-loading",s&&"btn-rounded"])};var fr=forwardRef((e,t)=>{let{size:r,rounded:n,variant:o="solid",type:s,block:a,color:i,focusafterclick:c=!0,icon:f,notification:b,className:y,children:g,disabled:l,loading:m,onClick:v,...x}=e,h=useRef(null),[S,L]=useState(!1),{hoverProps:u,isHovered:k}=gt({isDisabled:l||m}),{buttonProps:C,isPressed:w}=Ae({type:"submit",isDisabled:l||m,onFocusChange:L,onKeyDown:P=>((P.key==="Enter"||P.key===" ")&&(v==null||v(P),L(!0)),P),onPressEnd:P=>(P.pointerType,P.pointerType==="mouse"&&(c||P.target.blur()),P),onPressStart:P=>(P.pointerType==="mouse"&&L(!0),P),onPress:P=>{v==null||v(P);}},h),T=lr({variant:o,size:r,type:s,disabled:l,loading:m,rounded:n});return H.createElement("button",{...C,...u,"data-focus":S?"":null,"data-active":w?"":null,"data-hover":k?"":null,"data-loading":m?"":null,"data-color":i,className:(0, St.default)([T,f?g?"":"icononly":""],y),...x,ref:Ze(h,t)},m&&H.createElement("span",null,H.createElement("div",{className:`btn-spinner ${m?"opacity-100":"opacity-0"}`})),H.createElement("span",{className:`btn-content ${m?"opacity-0":"opacity-100"}`},f&&H.createElement("span",{className:(0, St.default)("btn-icon")},f),g),b&&H.createElement("div",{className:"btn-notification"}))});fr.displayName="Button";var dr=fr;var $r=He(Ve());function Lt(e){return H.Children.toArray(e).filter(t=>H.isValidElement(t))}var vr=forwardRef((e,t)=>{let{size:r,color:n,variant:o,attached:s,rounded:a,disabled:i,children:c,className:f,...b}=e,g=Lt(c).map(l=>H.cloneElement(l,{size:r||l.props.size,color:l.props.color||n,variant:l.props.variant||o,disabled:l.props.disabled||i,rounded:l.props.rounded||a,focusafterclick:!0}));return H.createElement("div",{ref:t,role:"group",className:(0, $r.default)("btn-group",s&&"btn-group-attached",a&&"btn-group-rounded",f),...b},g)});vr.displayName="ButtonGroup";var gr=vr;var Ko=dr;Ko.Group=gr;/*!
  Copyright (c) 2018 Jed Watson.
  Licensed under the MIT License (MIT), see
  http://jedwatson.github.io/classnames
*/

export { Ko as Button, gr as ButtonGroup };
//# sourceMappingURL=data:application/json;base64,